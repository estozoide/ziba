package core

import (
	"math/big"
	"time"
)

// SchemeParams are the scheme parameters defined by Eslami's scheme.
type SchemeParams struct {
	// Q (q) is a Sophie-Germain prime.
	Q *big.Int

	// P (p) is the safe prime generated by Q, P = 2Q + 1.
	P *big.Int

	// G (alpha) is a generator in Z_p^*.
	G *big.Int
}

// RsaPrivKey is a wrapper around rsa.PrivateKey from the crypto/rsa package.
type RsaKey struct {
	// First prime.
	P *big.Int

	// Second prime.
	Q *big.Int

	// Modulo length 2048 bits.
	N *big.Int

	// Private exponent.
	D *big.Int

	// Public exponent.
	E *big.Int
}

// Bank represents a bank's identity inside the scheme. Only used by a bank.
type Bank struct {
	// Scheme contains the associated scheme parameters to this bank's identity.
	Scheme SchemeParams

	// Key is the associated RSA key to this bank's identity.
	Key RsaKey

	// Priv (x) represents a bank's private identity number.
	Priv *big.Int

	// Pub (z) represents a bank's public identity number.
	Pub *big.Int
}

// BankProfile represents a bank's public identity inside the scheme. Used by clients to perform protocols with this bank.
type BankProfile struct {
	// Scheme contains the associated scheme parameters used by this bank.
	Scheme SchemeParams

	// Pub (z) is the bank's public identity number.
	Pub *big.Int

	// N is the bank's RSA key modulus.
	N *big.Int

	// E is the bank's RSA key public exponent.
	E *big.Int
}

// Client represents a client's identity inside the scheme. Only used by a client.
type Client struct {
	// Bank contains the associated bank's public identity to this client's identity.
	Bank BankProfile

	// Key is the associated RSA key to this client's identity.
	Key RsaKey

	// TradeId (ID_M) represents a client's transaction identifier.
	TradeId *big.Int

	// Priv (r_m) represents a client's private identity number.
	Priv *big.Int

	// Pub (m) represents a client's public identity number.
	Pub *big.Int

	// Credential (v) represents an identifier issued by a bank for this client.
	Credential *big.Int

	// Contract (R) represents an identifier issued and signed by a bank for this client.
	Contract *big.Int
}

// ClientProfile represents a client's public identity inside the scheme. Used by a bank to generate a client's account.
type ClientProfile struct {
	// PrivStamp is a client's private identity hidden using the scheme parameters, yielding a private stamp number.
	PrivStamp *big.Int

	// IdentityHash is a SHA256 sum generated using a client's public identity number and its private stamp number.
	IdentityHash *big.Int

	// TradeId is the client's transaction identifier.
	TradeId *big.Int

	// Pub is the client's public identity number.
	Pub *big.Int

	// N is the client's RSA key modulus.
	N *big.Int

	// E is the client's RSA key public exponent.
	E *big.Int
}

// ClientInfo a client's identity known as know by the bank.
type ClientInfo struct {
	// Profile is a client's public identity.
	Profile ClientProfile

	// K (k) is a computation parameter.
	K *big.Int

	// S (s) is a computation parameter.
	S *big.Int

	// Credential (v) is an identifier issue for this client's public identity.
	Credential *big.Int

	// Contract (R) is an identifier issue for this client's public identity.
	Contract *big.Int
}

// CoinRandom contains all random parameters generated during a withdrawal protocol.
type CoinRandom struct {
	// E (e) is a random parameter.
	E *big.Int

	// L (l) is a random parameter.
	L *big.Int

	// LInv (l^-1) is a computed parameter.
	LInv *big.Int

	// Beta1 (beta_1) is a random parameter
	Beta1 *big.Int

	// Beta1Inv (beta_1^-1) is a computed parameter.
	Beta1Inv *big.Int

	// Beta2 (beta_2) is a random parameter.
	Beta2 *big.Int

	// Y (y) is a random parameter.
	Y *big.Int

	// YInv (y^-1) is a computed parameter.
	YInv *big.Int
}

// CoinElgamal all parameters needed for an Elgamal signature.
type CoinElgamal struct {
	// Priv (w) is the Elgamal's signature private key.
	Priv *big.Int

	// Pub (alpha) is the Elgamal's signature public key.
	Pub *big.Int

	// First (u) is the Elgamal's signature random component.
	First *big.Int

	// Second (gamma) is the Elgamal's signature second component computed using the message to sign.
	Second *big.Int

	// Msg (d) is the Elgamal's signature message.
	Msg *big.Int
}

// CoinParams all the parameters associated to a coin, generated during the withdrawal protocol.
type CoinParams struct {
	// A is a parameter computed by the client.
	A *big.Int

	// ALower (a) is a parameter computed by the client.
	ALower *big.Int

	// C (c) is a parameter computed by the client.
	C *big.Int

	// Expiration (t) is the coin's expiration date choosen by the bank.
	Expiration time.Time

	// A1 (A') is a parameter computed by the bank.
	A1 *big.Int

	// C1 (c') is a parameter computed by the bank.
	C1 *big.Int

	// A2 (A'') is a parameter computed by the client.
	A2 *big.Int

	// R is a parameter computed by the client.
	R *big.Int
}

// Coin represents a complete coin and its associated parameters.
type Coin struct {
	// Random.
	Random CoinRandom

	// Elgamal.
	Elgamal CoinElgamal

	// Params.
	Params CoinParams
}

// CoinProfile cointains the public parameters of a coin.
type CoinProfile struct {
	// Pub (alpha) is the Elgamal's signature public key.
	Pub *big.Int

	// First (u) is the Elgamal's signature first component.
	First *big.Int

	// A is a coin parameter.
	A *big.Int

	// R is a coin parameter.
	R *big.Int

	// A2 (A'') is a coin parameter.
	A2 *big.Int

	// Expiration (t) is the coin's expiration date.
	Expiration time.Time

	// Second (gamma) is the Elgamal's signature second component.
	Second *big.Int

	// Msg (d) is the Elgamal's signature message.
	Msg *big.Int
}
